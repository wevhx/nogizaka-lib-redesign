{"version":3,"sources":["webpack:///./src/components/atoms/locales/LocalizedNumber/index.tsx","webpack:///./src/components/templates/Song/index.tsx","webpack:///./src/containers/Song/index.tsx","webpack:///./src/utils/arrays.ts","webpack:///./src/components/atoms/MemberCard/index.tsx","webpack:///./src/components/atoms/locales/LocalizedList/index.tsx"],"names":["LocalizedNumber","injectIntl","num","type","locale","intl","counter","React","Language","Ja","En","toCdNumber","Number","containerVariants","visible","opacity","x","transition","when","hidden","headingVariants","contentContainerVariants","y","staggerChildren","contentVariants","PerformersTag","singleNumber","tagName","includes","className","styles","caption","id","KojiharuCard","isCenter","MemberCard","nameKey","KOJIHARU","name","lastName","lastNameEn","firstName","firstNameEn","image","large","small","Song","title","songTags","artwork","performersTag","formation","members","centers","creators","useScrollRestoration","background","Layout","div","whileHover","scale","link","onClick","window","history","back","aria-label","ArrowBackIcon","variants","container","heading","tags","map","tag","index","key","flexBox","artworkImageWrapper","LazyImage","notLazy","src","medium","srcSet","alt","content","section","subheading","length","row","rowIndex","grid","memberName","member","card","nameNotations","profileImage","creatorsContainer","lyrics","creatorsItem","creatorWork","creatorNames","LocalizedList","list","compose","arrange","direct","query","SongContainer","data","songsJson","allMembersJson","single","filter","number","albums","array","keyField","membersArray","nodes","singleImages","Object","assign","item","String","formations","firstRow","secondRow","thirdRow","fourthRow","performers","center","highlightBgColor","highlightTextColor","nameText","hover","backgroundColor","textVariants","color","undefined","to","duration","style","imageContainer","wrapper","comma","Zh","join"],"mappings":"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","file":"component---src-containers-song-index-tsx-4aa8936ec4836fc6194c.js","sourcesContent":["import * as React from \"react\";\nimport { injectIntl } from \"react-intl\";\nimport { Language } from \"utils/constants\";\nimport { toCdNumber } from \"utils/strings\";\n\ninterface LocalizedNumberProps {\n  num: string | number;\n  type?: \"cd\" | \"row\";\n  intl: any;\n}\n\nexport const LocalizedNumber = injectIntl(\n  ({ num, type, intl: { locale } }: LocalizedNumberProps) => {\n    const counter = React.useMemo(() => {\n      switch (type) {\n        case \"cd\":\n          return locale === Language.Ja ? \"枚\" : \"张\";\n        case \"row\":\n          return locale === Language.Ja ? \"列\" : \"排\";\n        default:\n          return locale === Language.Ja ? \"枚\" : \"张\";\n      }\n    }, [type, locale]);\n\n    if (locale === Language.En) {\n      return type !== \"cd\" ? (\n        <>\n          {toCdNumber(num)} {type}\n        </>\n      ) : (\n        <>{toCdNumber(num)}</>\n      );\n    }\n\n    if (Number(num)) {\n      if (locale === Language.Ja) {\n        return <>{num + counter}目</>;\n      }\n      return <>第{num + counter}</>;\n    }\n\n    return <>under</>;\n  }\n);\n","import * as React from \"react\";\nimport styles from \"./song.module.scss\";\nimport { Layout } from \"components/atoms/Layout\";\nimport { ArrowBackIcon } from \"components/atoms/icons/ArrowBackIcon\";\nimport { motion } from \"framer-motion\";\nimport { SongType } from \"types/responseTypes\";\nimport { FormattedMessage, injectIntl } from \"react-intl\";\nimport { Language, KOJIHARU } from \"utils/constants\";\nimport { LocalizedList } from \"components/atoms/locales/LocalizedList\";\nimport { MemberCard } from \"components/atoms/MemberCard\";\nimport { LocalizedNumber } from \"components/atoms/locales/LocalizedNumber\";\nimport { useScrollRestoration } from \"utils/hooks\";\nimport { LazyImage } from \"components/atoms/LazyImage\";\n\nconst containerVariants = {\n  visible: {\n    opacity: 1,\n    x: 0,\n    transition: {\n      when: \"beforeChildren\",\n    },\n  },\n  hidden: {\n    opacity: 0,\n    x: -20,\n  },\n};\n\nconst headingVariants = {\n  visible: {\n    opacity: 1,\n    x: 0,\n  },\n  hidden: {\n    opacity: 0,\n    x: -20,\n  },\n};\n\nconst contentContainerVariants = {\n  visible: {\n    opacity: 1,\n    y: 0,\n    transition: {\n      when: \"beforeChildren\",\n      staggerChildren: 0.2,\n    },\n  },\n  hidden: {\n    opacity: 0,\n    y: 20,\n  },\n};\n\nconst contentVariants = {\n  visible: {\n    opacity: 1,\n    y: 0,\n  },\n  hidden: {\n    opacity: 0,\n    y: -20,\n  },\n};\n\nconst PerformersTag = injectIntl(\n  ({\n    singleNumber,\n    tagName,\n    intl: { locale },\n  }: {\n    singleNumber: string;\n    tagName: string;\n    intl: any;\n  }) => {\n    if (tagName === \"\") {\n      return null;\n    }\n\n    if (tagName.includes(\"generation\")) {\n      return (\n        <p className={styles.caption}>\n          #<FormattedMessage {...({ id: tagName } as any)} />\n        </p>\n      );\n    }\n\n    if (tagName === \"selected\" || tagName === \"under\") {\n      return locale === Language.En ? (\n        <p className={styles.caption}>\n          #<LocalizedNumber num={singleNumber} type=\"cd\" />{\" \"}\n          <FormattedMessage {...({ id: \"single\" } as any)} />{\" \"}\n          <FormattedMessage {...({ id: tagName } as any)} />{\" \"}\n          <FormattedMessage {...({ id: \"members\" } as any)} />\n        </p>\n      ) : (\n        <p className={styles.caption}>\n          #<LocalizedNumber num={singleNumber} type=\"cd\" />\n          <FormattedMessage {...({ id: \"single\" } as any)} />\n          <FormattedMessage {...({ id: tagName } as any)} />\n          <FormattedMessage {...({ id: \"members\" } as any)} />\n        </p>\n      );\n    }\n\n    return <p className={styles.caption}>#{tagName}</p>;\n  }\n);\n\nconst KojiharuCard = ({ isCenter }: { isCenter: boolean }) => (\n  <MemberCard\n    nameKey={KOJIHARU}\n    name={{\n      lastName: \"小嶋\",\n      lastNameEn: \"kojima\",\n      firstName: \"陽菜\",\n      firstNameEn: \"haruna\",\n    }}\n    image={{\n      large:\n        \"https://raw.githubusercontent.com/shawnrivers/nogizaka-data/master/src/images/members/others/kojimaharuna_large.jpg\",\n      small:\n        \"https://raw.githubusercontent.com/shawnrivers/nogizaka-data/master/src/images/members/others/kojimaharuna_small.jpg\",\n    }}\n    isCenter={isCenter}\n  />\n);\n\ntype SongPerformerType = {\n  name: string;\n  nameNotations: {\n    lastName: string;\n    firstName: string;\n    lastNameEn: string;\n    firstNameEn: string;\n  };\n  profileImage: {\n    large: string;\n    small: string;\n  };\n  singleImages: {\n    large: string;\n    small: string;\n  }[];\n};\n\ninterface SongProps {\n  title: string;\n  songTags: string[];\n  type: SongType;\n  artwork: {\n    large: string;\n    medium: string;\n  };\n  performersTag: {\n    singleNumber: string;\n    name: string;\n  };\n  formation: string[][];\n  members: { [key: string]: SongPerformerType };\n  centers: string[];\n  creators: {\n    arrange: string[];\n    compose: string[];\n    direct: string[];\n    lyrics: string[];\n  };\n}\n\nexport const Song = ({\n  title,\n  type,\n  songTags,\n  artwork,\n  performersTag,\n  formation,\n  members,\n  centers,\n  creators,\n}: SongProps) => {\n  useScrollRestoration();\n\n  return (\n    <div className={styles.background}>\n      <Layout>\n        <motion.div whileHover={{ x: -7, scale: 1.5 }} className={styles.link}>\n          <button\n            onClick={() => {\n              window.history.back();\n            }}\n            aria-label=\"Go Back\"\n          >\n            <ArrowBackIcon className={styles.back} />\n          </button>\n        </motion.div>\n        <motion.div variants={containerVariants} className={styles.container}>\n          <motion.div variants={headingVariants} className={styles.heading}>\n            <h1 className={styles.title}>{title}</h1>\n            <h4 className={styles.tags}>\n              <span>\n                #<FormattedMessage {...({ id: type } as any)} />\n              </span>\n              {songTags.map((tag, index) => (\n                <span key={index}>{tag}</span>\n              ))}\n            </h4>\n          </motion.div>\n          <motion.div\n            variants={contentContainerVariants}\n            className={styles.flexBox}\n          >\n            <motion.div variants={contentVariants} className={styles.artwork}>\n              <div className={styles.artworkImageWrapper}>\n                <LazyImage\n                  notLazy\n                  src={artwork.medium}\n                  srcSet={`${artwork.large} 1.5x`}\n                  alt={title}\n                />\n              </div>\n            </motion.div>\n            <motion.div variants={contentVariants} className={styles.content}>\n              <section className={styles.section}>\n                <h2 className={styles.subheading}>\n                  <FormattedMessage {...({ id: \"performers\" } as any)} />\n                </h2>\n                <PerformersTag\n                  singleNumber={performersTag.singleNumber}\n                  tagName={performersTag.name}\n                />\n                <div className={styles.formation}>\n                  {formation.length > 1 ? (\n                    formation.map((row, index) => (\n                      <div key={index} className={styles.row}>\n                        <h4 className={styles.rowIndex}>\n                          <LocalizedNumber num={index + 1} type=\"row\" />\n                        </h4>\n                        <div className={styles.grid}>\n                          {row.map(memberName => {\n                            if (memberName !== KOJIHARU) {\n                              const member = members[memberName];\n                              return (\n                                <div className={styles.card} key={member.name}>\n                                  <MemberCard\n                                    nameKey={memberName}\n                                    name={member.nameNotations}\n                                    image={member.profileImage}\n                                    isCenter={centers.includes(member.name)}\n                                  />\n                                </div>\n                              );\n                            } else {\n                              return (\n                                <div className={styles.card} key={memberName}>\n                                  <KojiharuCard\n                                    isCenter={centers.includes(memberName)}\n                                  />\n                                </div>\n                              );\n                            }\n                          })}\n                        </div>\n                      </div>\n                    ))\n                  ) : (\n                    <div className={styles.grid}>\n                      {formation[0].map(memberName => {\n                        if (memberName !== KOJIHARU) {\n                          const member = members[memberName];\n                          return (\n                            <div className={styles.card} key={member.name}>\n                              <MemberCard\n                                nameKey={member.name}\n                                name={member.nameNotations}\n                                image={member.profileImage}\n                                isCenter={centers.includes(memberName)}\n                              />\n                            </div>\n                          );\n                        } else {\n                          return (\n                            <div className={styles.card} key={memberName}>\n                              <KojiharuCard\n                                isCenter={centers.includes(memberName)}\n                              />\n                            </div>\n                          );\n                        }\n                      })}\n                    </div>\n                  )}\n                </div>\n              </section>\n              <section className={styles.section}>\n                <h2\n                  className={styles.subheading + \" \" + styles.creatorsContainer}\n                >\n                  <FormattedMessage {...({ id: \"creators\" } as any)} />\n                </h2>\n                <div className={styles.creators}>\n                  {creators.lyrics.length > 0 ? (\n                    <div className={styles.creatorsItem}>\n                      <span className={styles.creatorWork}>\n                        <FormattedMessage {...({ id: \"lyrics\" } as any)} />\n                      </span>\n                      <span className={styles.creatorNames}>\n                        <LocalizedList list={creators.lyrics} />\n                      </span>\n                    </div>\n                  ) : null}\n                  {creators.compose.length > 0 ? (\n                    <div className={styles.creatorsItem}>\n                      <span className={styles.creatorWork}>\n                        <FormattedMessage {...({ id: \"compose\" } as any)} />\n                      </span>\n                      <span className={styles.creatorNames}>\n                        <LocalizedList list={creators.compose} />\n                      </span>\n                    </div>\n                  ) : null}\n                  {creators.arrange.length > 0 ? (\n                    <div className={styles.creatorsItem}>\n                      <span className={styles.creatorWork}>\n                        <FormattedMessage {...({ id: \"arrange\" } as any)} />\n                      </span>\n                      <span className={styles.creatorNames}>\n                        <LocalizedList list={creators.arrange} />\n                      </span>\n                    </div>\n                  ) : null}\n                  {creators.direct.length > 0 ? (\n                    <div className={styles.creatorsItem}>\n                      <span className={styles.creatorWork}>\n                        <FormattedMessage {...({ id: \"direct\" } as any)} />\n                      </span>\n                      <span className={styles.creatorNames}>\n                        <LocalizedList list={creators.direct} />\n                      </span>\n                    </div>\n                  ) : null}\n                </div>\n              </section>\n            </motion.div>\n          </motion.div>\n        </motion.div>\n      </Layout>\n    </div>\n  );\n};\n","import * as React from \"react\";\nimport { graphql } from \"gatsby\";\nimport { SongType } from \"types/responseTypes\";\nimport { Song } from \"components/templates/Song\";\nimport { toCdNumber } from \"utils/strings\";\nimport { arrayToObject } from \"utils/arrays\";\n\nexport const query = graphql`\n  query($key: String!) {\n    songsJson(key: { eq: $key }) {\n      title\n      type\n      artwork {\n        large\n        medium\n      }\n      single {\n        number\n      }\n      albums {\n        number\n      }\n      performersTag {\n        singleNumber\n        name\n      }\n      performers {\n        center\n      }\n      formations {\n        firstRow\n        fourthRow\n        secondRow\n        thirdRow\n      }\n      creators {\n        arrange\n        compose\n        direct\n        lyrics\n      }\n    }\n    allMembersJson {\n      nodes {\n        name\n        nameNotations {\n          firstName\n          firstNameEn\n          lastName\n          lastNameEn\n        }\n        profileImage {\n          large\n          small\n        }\n        singleImages {\n          large\n          small\n        }\n      }\n    }\n  }\n`;\n\ninterface SongData {\n  data: {\n    songsJson: {\n      title: string;\n      type: SongType;\n      artwork: {\n        large: string;\n        medium: string;\n      };\n      single: {\n        number: string;\n      };\n      albums: {\n        number: string;\n      }[];\n      performersTag: {\n        singleNumber: string;\n        name: string;\n      };\n      performers: {\n        center: string[];\n      };\n      formations: {\n        firstRow: string[];\n        fourthRow: string[];\n        secondRow: string[];\n        thirdRow: string[];\n      };\n      creators: {\n        arrange: string[];\n        compose: string[];\n        direct: string[];\n        lyrics: string[];\n      };\n    };\n    allMembersJson: {\n      nodes: {\n        name: string;\n        nameNotations: {\n          lastName: string;\n          firstName: string;\n          lastNameEn: string;\n          firstNameEn: string;\n        };\n        profileImage: {\n          large: string;\n          small: string;\n        };\n        singleImages: {\n          large: string;\n          small: string;\n        }[];\n      }[];\n    };\n  };\n}\n\nconst SongContainer = ({ data: { songsJson, allMembersJson } }: SongData) => {\n  const songTags = React.useMemo(\n    () => [\n      ...[songsJson.single]\n        .filter(({ number }) => number !== \"\")\n        .map(({ number }) => `#${toCdNumber(number)} single`),\n      ...songsJson.albums.map(({ number }) => `#${toCdNumber(number)} album`),\n    ],\n    [songsJson.single, songsJson.albums]\n  );\n\n  const members = React.useMemo(() => {\n    const singleNumber = Number(songsJson.single.number);\n\n    let membersArray = allMembersJson.nodes;\n\n    for (const member of membersArray) {\n      if (songsJson.single.number !== \"\") {\n        member.profileImage = member.singleImages[singleNumber - 1];\n      }\n    }\n\n    return arrayToObject(membersArray, \"name\");\n  }, [allMembersJson.nodes, songsJson.single.number]);\n\n  const formation = React.useMemo(\n    () =>\n      [\n        songsJson.formations.firstRow,\n        songsJson.formations.secondRow,\n        songsJson.formations.thirdRow,\n        songsJson.formations.fourthRow,\n      ].filter(formation => formation.length > 0),\n    [songsJson.formations]\n  );\n\n  return songsJson ? (\n    <Song\n      title={songsJson.title}\n      songTags={songTags}\n      type={songsJson.type}\n      artwork={songsJson.artwork}\n      performersTag={songsJson.performersTag}\n      formation={formation}\n      members={members}\n      centers={songsJson.performers.center}\n      creators={songsJson.creators}\n    />\n  ) : null;\n};\n\nexport default SongContainer;\n","export const arrayToObject = <T>(\n  array: T[],\n  keyField: keyof T\n): { [key: string]: T } =>\n  Object.assign({}, ...array.map(item => ({ [String(item[keyField])]: item })));\n\nexport const sortByDate = <T>(\n  array: T[],\n  keyField: keyof T,\n  order: \"asc\" | \"desc\"\n): T[] =>\n  array\n    .slice()\n    .sort((itemA, itemB) =>\n      order === \"asc\"\n        ? new Date(itemA[keyField] as any).getTime() -\n          new Date(itemB[keyField] as any).getTime()\n        : new Date(itemB[keyField] as any).getTime() -\n          new Date(itemA[keyField] as any).getTime()\n    );\n","import * as React from \"react\";\nimport styles from \"./membercard.module.scss\";\nimport { motion } from \"framer-motion\";\nimport { injectIntl } from \"react-intl\";\nimport { Language, KOJIHARU } from \"utils/constants\";\nimport { LocalizedLink } from \"components/atoms/locales/LocalizedLink\";\nimport { LazyImage } from \"components/atoms/LazyImage\";\n\ninterface MemberCardProps {\n  image: {\n    large: string;\n    small: string;\n  };\n  nameKey: string;\n  name: {\n    lastName: string;\n    firstName: string;\n    lastNameEn: string;\n    firstNameEn: string;\n  };\n  highlightBgColor?: string;\n  highlightTextColor?: string;\n  isCenter?: boolean;\n  intl: any;\n}\n\nexport const MemberCard = injectIntl(\n  ({\n    image,\n    nameKey,\n    name,\n    intl: { locale },\n    highlightBgColor,\n    highlightTextColor,\n    isCenter,\n  }: MemberCardProps) => {\n    const nameText = React.useMemo(\n      () =>\n        locale === Language.En\n          ? name.lastNameEn + \" \" + name.firstNameEn\n          : name.lastName + \" \" + name.firstName,\n      [locale, name]\n    );\n\n    const containerVariants = React.useMemo(\n      () =>\n        highlightBgColor\n          ? {\n              hover: {\n                scale: 1.08,\n                backgroundColor: highlightBgColor,\n              },\n            }\n          : {\n              hover: {\n                scale: 1.08,\n              },\n            },\n      [highlightBgColor]\n    );\n\n    const textVariants = React.useMemo(\n      () =>\n        highlightTextColor\n          ? {\n              hover: {\n                color: highlightTextColor,\n              },\n            }\n          : undefined,\n      [highlightTextColor]\n    );\n\n    if (nameKey !== KOJIHARU) {\n      return (\n        <LocalizedLink to={`/members/${nameKey}`} className={styles.link}>\n          <motion.div\n            whileHover=\"hover\"\n            variants={containerVariants}\n            transition={{ duration: 0.3 }}\n            style={isCenter ? { backgroundColor: \"#e887a3\" } : undefined}\n            className={styles.container}\n          >\n            <div className={styles.imageContainer}>\n              <div className={styles.wrapper}>\n                <LazyImage\n                  src={image.small}\n                  srcSet={image.large + \" 2x\"}\n                  alt={nameText}\n                  className={styles.image}\n                />\n              </div>\n            </div>\n            <motion.div\n              variants={textVariants}\n              transition={{ duration: 0.3 }}\n              style={isCenter ? { color: \"#ffffff\" } : undefined}\n              className={styles.name}\n            >\n              <span>{nameText}</span>\n            </motion.div>\n          </motion.div>\n        </LocalizedLink>\n      );\n    } else {\n      return (\n        <div\n          style={isCenter ? { backgroundColor: \"#e887a3\" } : undefined}\n          className={styles.container}\n        >\n          <div className={styles.imageContainer}>\n            <div className={styles.wrapper}>\n              <LazyImage\n                src={image.small}\n                srcSet={image.large + \" 2x\"}\n                alt={nameText}\n                className={styles.image}\n              />\n            </div>\n          </div>\n          <div\n            style={isCenter ? { color: \"#ffffff\" } : undefined}\n            className={styles.name}\n          >\n            <span>{nameText}</span>\n          </div>\n        </div>\n      );\n    }\n  }\n);\n","import * as React from \"react\";\nimport { injectIntl } from \"react-intl\";\nimport { Language } from \"utils/constants\";\n\ninterface LocalizedListProps {\n  list: string[];\n  intl: any;\n}\n\nexport const LocalizedList = injectIntl(\n  ({ list, intl: { locale } }: LocalizedListProps) => {\n    let comma: string;\n    switch (locale) {\n      case Language.Zh:\n        comma = \"、\";\n        break;\n      case Language.Ja:\n        comma = \"、\";\n        break;\n      default:\n        comma = \", \";\n        break;\n    }\n\n    return <>{list.join(comma)}</>;\n  }\n);\n"],"sourceRoot":""}