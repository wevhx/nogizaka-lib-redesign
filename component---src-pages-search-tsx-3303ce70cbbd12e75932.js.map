{"version":3,"sources":["webpack:///./src/pages/search.tsx","webpack:///./src/components/atoms/SearchResultCard/index.tsx","webpack:///./src/components/molecules/SearchResultCategory/index.tsx","webpack:///./src/components/templates/Search/index.tsx"],"names":["timeout","SearchResultCard","to","imgSrc","imgSrcSet","title","caption","secondCaption","className","LocalizedLink","classNames","styles","container","imagePlaceholder","LazyImage","notLazy","src","srcSet","alt","image","text","SearchResultCategory","results","React","showMore","toggleShowMore","length","header","Message","onClick","moreToggle","resultCardList","slice","map","result","key","heading","resultCard","Search","injectIntl","query","search","isSearching","intl","hasNoResult","members","singles","albums","songs","Layout","SearchIcon","searchIcon","inputContainer","type","value","onChange","placeholder","formatMessage","id","input","noResult","category","SearchContainer","useScrollRestoration","setQuery","setResults","setIsSearching","lunr","window","__LUNR__","ja","event","inputQuery","currentTarget","clearTimeout","setTimeout","searchResult","index","extend","ref","store","convertedResults","SearchResultType","Members","push","nameKey","profileImage","small","large","nameNotations","lastName","firstName","lastNameEn","firstNameEn","Singles","number","artwork","medium","toCdNumber","Albums","Songs","songType","single","album","forceCheck"],"mappings":"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","file":"component---src-pages-search-tsx-3303ce70cbbd12e75932.js","sourcesContent":["import * as React from \"react\";\nimport { forceCheck } from \"react-lazyload\";\nimport { injectIntl } from \"react-intl\";\nimport { Search, SearchResult } from \"components/templates/Search\";\nimport { SearchResultType } from \"utils/constants\";\nimport { SongType } from \"types/responseTypes\";\nimport { useScrollRestoration } from \"utils/hooks\";\nimport { toCdNumber } from \"utils/strings\";\n\nexport type MemberDoc = {\n  id: string;\n  name: string;\n  nameKey: string;\n  nameNotations: {\n    lastName: string;\n    firstName: string;\n    lastNameEn: string;\n    firstNameEn: string;\n    lastNameFurigana: string;\n    firstNameFurigana: string;\n  };\n  profileImage: {\n    large: string;\n    small: string;\n  };\n  type: SearchResultType.Members;\n};\n\nexport type SingleDoc = {\n  id: string;\n  name: string;\n  title: string;\n  number: string;\n  artwork: {\n    large: string;\n    medium: string;\n    small: string;\n  };\n  type: SearchResultType.Singles;\n};\n\nexport type AlbumDoc = {\n  id: string;\n  name: string;\n  title: string;\n  number: string;\n  artwork: {\n    large: string;\n    medium: string;\n    small: string;\n  };\n  type: SearchResultType.Albums;\n};\n\nexport type SongDoc = {\n  id: string;\n  name: string;\n  title: string;\n  key: string;\n  artwork: {\n    large: string;\n    medium: string;\n    small: string;\n  };\n  songType: SongType;\n  single: {\n    number: string;\n    title: string;\n  };\n  album: {\n    number: string;\n    title: string;\n  };\n  type: SearchResultType.Songs;\n};\n\nexport type SearchDoc = AlbumDoc | SingleDoc | SongDoc | MemberDoc;\n\nlet timeout: NodeJS.Timeout;\n\nexport const SearchContainer = injectIntl(({ intl }: { intl: any }) => {\n  useScrollRestoration();\n\n  const [query, setQuery] = React.useState(\"\");\n  const [results, setResults] = React.useState<SearchDoc[]>([]);\n  const [isSearching, setIsSearching] = React.useState(false);\n\n  const lunr = React.useMemo(\n    () => (typeof window !== \"undefined\" ? (window as any).__LUNR__.ja : null),\n    []\n  );\n\n  const search = React.useCallback(\n    (event: React.FormEvent<HTMLInputElement>) => {\n      const inputQuery = event.currentTarget.value;\n      setQuery(inputQuery);\n\n      setIsSearching(true);\n\n      clearTimeout(timeout);\n\n      timeout = setTimeout(() => {\n        const searchResult =\n          inputQuery !== \"\"\n            ? lunr.index\n                .search(`name:*${inputQuery}*`, { extend: true })\n                .map(({ ref }: any) => lunr.store[ref])\n            : [];\n\n        setResults(searchResult);\n\n        setIsSearching(false);\n      }, 1000);\n    },\n    [lunr]\n  );\n\n  const convertedResults = React.useMemo(() => {\n    let members: SearchResult[] = [];\n    let singles: SearchResult[] = [];\n    let albums: SearchResult[] = [];\n    let songs: SearchResult[] = [];\n\n    for (const result of results) {\n      switch (result.type) {\n        case SearchResultType.Members:\n          members.push({\n            to: `/${result.type}/${result.nameKey}`,\n            imgSrc: result.profileImage.small,\n            imgSrcSet: `${result.profileImage.large} 2x`,\n            heading: `${result.nameNotations.lastName} ${result.nameNotations.firstName}`,\n            caption: `${result.nameNotations.lastNameEn} ${result.nameNotations.firstNameEn}`,\n          });\n          break;\n        case SearchResultType.Singles:\n          singles.push({\n            to: `/${result.type}/${result.number}`,\n            imgSrc: result.artwork.small,\n            imgSrcSet: `${result.artwork.medium} 2x, ${result.artwork.large} 3x`,\n            heading: result.title,\n            caption: `${toCdNumber(result.number)} single`,\n          });\n          break;\n        case SearchResultType.Albums:\n          albums.push({\n            to: `/${result.type}/${result.number}`,\n            imgSrc: result.artwork.small,\n            imgSrcSet: `${result.artwork.medium} 2x, ${result.artwork.large} 3x`,\n            heading: result.title,\n            caption: `${toCdNumber(result.number)} album`,\n          });\n          break;\n        case SearchResultType.Songs:\n          songs.push({\n            to: `/${result.type}/${result.key}`,\n            imgSrc: result.artwork.small,\n            imgSrcSet: `${result.artwork.medium} 2x, ${result.artwork.large} 3x`,\n            heading: result.title,\n            caption: `#${intl.formatMessage({\n              id: result.songType,\n            })}`,\n            secondCaption:\n              result.single.number !== \"\"\n                ? `#${toCdNumber(result.single.number)} single`\n                : `#${toCdNumber(result.album.number)} album`,\n          });\n          break;\n        default:\n          break;\n      }\n    }\n\n    return { members, singles, albums, songs };\n  }, [results, intl]);\n\n  React.useEffect(() => {\n    forceCheck();\n  }, [results]);\n\n  return (\n    <Search\n      query={query}\n      search={search}\n      results={convertedResults}\n      isSearching={isSearching}\n    />\n  );\n});\n\nexport default () => <SearchContainer />;\n","import * as React from \"react\";\nimport styles from \"./searchresultcard.module.scss\";\nimport { LazyImage } from \"components/atoms/LazyImage\";\nimport { classNames } from \"utils/strings\";\nimport { LocalizedLink } from \"components/atoms/locales/LocalizedLink\";\n\ninterface SearchResultCardProps {\n  to: string;\n  imgSrc: string;\n  imgSrcSet: string;\n  title: string;\n  caption: string;\n  secondCaption?: string;\n  className?: string;\n}\n\nexport const SearchResultCard = ({\n  to,\n  imgSrc,\n  imgSrcSet,\n  title,\n  caption,\n  secondCaption,\n  className,\n}: SearchResultCardProps) => {\n  return (\n    <LocalizedLink to={to}>\n      <div className={classNames(styles.container, className)}>\n        <div className={styles.imagePlaceholder}>\n          <LazyImage\n            notLazy\n            src={imgSrc}\n            srcSet={imgSrcSet}\n            alt={title}\n            className={styles.image}\n          />\n        </div>\n        <div className={styles.text}>\n          <h3 className={styles.title}>{title}</h3>\n          <p className={styles.caption}>\n            <span>{caption}</span>\n            {secondCaption ? <span>{secondCaption}</span> : null}\n          </p>\n        </div>\n      </div>\n    </LocalizedLink>\n  );\n};\n","import * as React from \"react\";\nimport styles from \"./searchresultcategory.module.scss\";\nimport { SearchResultCard } from \"components/atoms/SearchResultCard\";\nimport { Message } from \"components/atoms/Message\";\n\ninterface SearchResultCategoryProps {\n  title: string;\n  results: {\n    to: string;\n    imgSrc: string;\n    imgSrcSet: string;\n    heading: string;\n    caption: string;\n    secondCaption?: string;\n  }[];\n  className?: string;\n}\n\nexport const SearchResultCategory = ({\n  title,\n  results,\n  className,\n}: SearchResultCategoryProps) => {\n  const [showMore, toggleShowMore] = React.useState(false);\n\n  return results.length > 0 ? (\n    <div className={className}>\n      <div className={styles.header}>\n        <h2 className={styles.title}>\n          <Message text={title} />\n        </h2>\n        {results.length > 3 ? (\n          !showMore ? (\n            <button\n              onClick={() => toggleShowMore(true)}\n              className={styles.moreToggle}\n            >\n              <Message text=\"show all\" />\n            </button>\n          ) : (\n            <button\n              onClick={() => toggleShowMore(false)}\n              className={styles.moreToggle}\n            >\n              <Message text=\"show less\" />\n            </button>\n          )\n        ) : null}\n      </div>\n      <ul className={styles.resultCardList}>\n        {results.slice(0, 3).map(result => (\n          <li key={result.heading} className={styles.resultCard}>\n            <SearchResultCard\n              to={result.to}\n              imgSrc={result.imgSrc}\n              imgSrcSet={result.imgSrcSet}\n              title={result.heading}\n              caption={result.caption}\n              secondCaption={result.secondCaption}\n            />\n          </li>\n        ))}\n        {showMore\n          ? results.slice(3, results.length).map(result => (\n              <li key={result.heading} className={styles.resultCard}>\n                <SearchResultCard\n                  to={result.to}\n                  imgSrc={result.imgSrc}\n                  imgSrcSet={result.imgSrcSet}\n                  title={result.heading}\n                  caption={result.caption}\n                  secondCaption={result.secondCaption}\n                />\n              </li>\n            ))\n          : null}\n      </ul>\n    </div>\n  ) : null;\n};\n","import * as React from \"react\";\nimport { injectIntl } from \"react-intl\";\nimport styles from \"./search.module.scss\";\nimport { Layout } from \"components/atoms/Layout\";\nimport { SearchIcon } from \"components/atoms/icons/SearchIcon\";\nimport { Message } from \"components/atoms/Message\";\nimport { SearchResultCategory } from \"components/molecules/SearchResultCategory\";\n\nexport type SearchResult = {\n  to: string;\n  imgSrc: string;\n  imgSrcSet: string;\n  heading: string;\n  caption: string;\n  secondCaption?: string;\n};\n\ninterface SearchProps {\n  query: string;\n  search(event: React.FormEvent<HTMLInputElement>): void;\n  results: {\n    members: SearchResult[];\n    singles: SearchResult[];\n    albums: SearchResult[];\n    songs: SearchResult[];\n  };\n  isSearching: boolean;\n  intl: any;\n}\n\nexport const Search = injectIntl(\n  ({ query, search, results, isSearching, intl }: SearchProps) => {\n    const hasNoResult = React.useMemo(\n      () =>\n        results.members.length +\n          results.singles.length +\n          results.albums.length +\n          results.songs.length ===\n          0 &&\n        query !== \"\" &&\n        !isSearching,\n      [results, query, isSearching]\n    );\n\n    return (\n      <Layout className={styles.container}>\n        <div className={styles.search}>\n          <SearchIcon className={styles.searchIcon} />\n          <div className={styles.inputContainer}>\n            <input\n              type=\"text\"\n              value={query}\n              onChange={search}\n              placeholder={intl.formatMessage({\n                id: \"Song title, member name, etc.\",\n              })}\n              className={styles.input}\n            />\n          </div>\n        </div>\n        {hasNoResult ? (\n          <p className={styles.noResult}>\n            <Message text=\"no result\" />\n          </p>\n        ) : null}\n        <SearchResultCategory\n          title=\"members\"\n          results={results.members}\n          className={styles.category}\n        />\n        <SearchResultCategory\n          title=\"singles\"\n          results={results.singles}\n          className={styles.category}\n        />\n        <SearchResultCategory\n          title=\"albums\"\n          results={results.albums}\n          className={styles.category}\n        />\n        <SearchResultCategory title=\"songs\" results={results.songs} />\n      </Layout>\n    );\n  }\n);\n"],"sourceRoot":""}