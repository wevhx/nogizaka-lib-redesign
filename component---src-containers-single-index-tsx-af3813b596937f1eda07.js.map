{"version":3,"sources":["webpack:///./src/containers/Single/index.tsx","webpack:///./src/components/atoms/icons/ArrowBackIcon.tsx","webpack:///./src/components/atoms/Track/index.tsx","webpack:///./src/components/atoms/icons/ArrowLeftIcon.tsx","webpack:///./src/components/atoms/icons/ArrowRightIcon.tsx","webpack:///./src/components/molecules/Artworks/index.tsx","webpack:///./src/components/templates/Cd/index.tsx"],"names":["query","SingleContainer","singlesJson","data","type","CdType","Singles","title","number","artworks","songs","release","ArrowBackIcon","className","width","height","viewBox","fill","d","containerVariants","hover","backgroundColor","transition","duration","textVariants","color","Track","injectIntl","locale","intl","focusPerformers","songKey","focusPerformersText","React","getFocusPerformersText","div","whileHover","variants","classNames","styles","container","LocalizedLink","to","span","content","h3","description","Message","text","ArrowLeftIcon","ArrowRightIcon","Artworks","artworkIndex","setArtworkIndex","handleClickNextArtwork","length","handleClickPreviousArtwork","handleClickImage","artwork","button","scale","x","onClick","aria-label","arrow","images","map","index","key","animate","opacity","src","medium","srcSet","large","alt","image","indicator","_","style","dot","visible","when","hidden","headingVariants","contentContainerVariants","y","staggerChildren","contentVariants","Cd","useScrollRestoration","background","Layout","page","link","Links","Albums","label","back","heading","toCdNumber","slice","flexBox","section","subheading","trackList","song","track","value","year","month","day"],"mappings":"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","file":"component---src-containers-single-index-tsx-af3813b596937f1eda07.js","sourcesContent":["import * as React from \"react\";\nimport { graphql } from \"gatsby\";\nimport { CdType, FocusPerformersType, SongType } from \"types/responseTypes\";\nimport { Cd } from \"components/templates/Cd\";\n\nexport const query = graphql`\n  query($number: String!) {\n    singlesJson(number: { eq: $number }) {\n      title\n      number\n      artworks {\n        large\n        medium\n      }\n      songs {\n        key\n        title\n        type\n        focusPerformers {\n          name\n          type\n        }\n      }\n      release\n    }\n  }\n`;\n\ninterface SingleData {\n  data: {\n    singlesJson: {\n      title: string;\n      number: string;\n      artworks: {\n        large: string;\n        medium: string;\n      }[];\n      songs: {\n        key: string;\n        title: string;\n        type: SongType;\n        focusPerformers: {\n          name: string[];\n          type: FocusPerformersType;\n        };\n      }[];\n      release: string;\n    };\n  };\n  pageContext: {\n    cdType: CdType;\n    number: string;\n    locale: string;\n  };\n}\n\nconst SingleContainer = ({ data: { singlesJson } }: SingleData) => {\n  return singlesJson ? (\n    <Cd\n      type={CdType.Singles}\n      title={singlesJson.title}\n      number={singlesJson.number}\n      artworks={singlesJson.artworks}\n      songs={singlesJson.songs}\n      release={singlesJson.release}\n    />\n  ) : null;\n};\n\nexport default SingleContainer;\n","import * as React from \"react\";\n\ninterface ArrowBackIconProps {\n  className?: string;\n}\n\nexport const ArrowBackIcon = ({ className }: ArrowBackIconProps) => (\n  <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" className={className}>\n    <path fill=\"none\" d=\"M0 0h24v24H0V0z\" />\n    <path d=\"M20 11H7.83l5.59-5.59L12 4l-8 8 8 8 1.41-1.41L7.83 13H20v-2z\" />\n  </svg>\n);\n","import * as React from \"react\";\nimport { injectIntl } from \"react-intl\";\nimport { motion } from \"framer-motion\";\nimport styles from \"./track.module.scss\";\nimport { FocusPerformersType, SongType } from \"types/responseTypes\";\nimport { LocalizedLink } from \"components/atoms/locales/LocalizedLink\";\nimport { classNames, getFocusPerformersText } from \"utils/strings\";\nimport { Message } from \"components/atoms/Message\";\n\nconst containerVariants = {\n  hover: { backgroundColor: \"#595959\", transition: { duration: 0.3 } },\n};\n\nconst textVariants = {\n  hover: { color: \"#ffffff\", transition: { duration: 0.2 } },\n};\n\ninterface TrackProps {\n  number: number;\n  songKey: string;\n  title: string;\n  type: SongType;\n  focusPerformers: {\n    name: string[];\n    type: FocusPerformersType;\n  };\n  intl: any;\n  className?: string;\n}\n\nexport const Track = injectIntl(\n  ({\n    intl: { locale },\n    focusPerformers,\n    songKey,\n    number,\n    title,\n    type,\n    className,\n  }: TrackProps) => {\n    const focusPerformersText = React.useMemo(\n      () => getFocusPerformersText(focusPerformers, locale),\n      [focusPerformers, locale]\n    );\n\n    return songKey !== \"OVERTURE\" ? (\n      <motion.div\n        whileHover=\"hover\"\n        variants={containerVariants}\n        className={classNames(styles.container, className)}\n      >\n        <LocalizedLink to={`/songs/${songKey}`}>\n          <motion.span variants={textVariants} className={styles.number}>\n            {number}.\n          </motion.span>\n          <div className={styles.content}>\n            <motion.h3 variants={textVariants} className={styles.title}>\n              {title}\n            </motion.h3>\n            <motion.div variants={textVariants} className={styles.description}>\n              <span>\n                #<Message text={type} />\n              </span>\n              <span>{focusPerformersText}</span>\n            </motion.div>\n          </div>\n        </LocalizedLink>\n      </motion.div>\n    ) : (\n      <div className={classNames(styles.container, className)}>\n        <span className={styles.number}>{number}.</span>\n        <div className={styles.content}>\n          <h3 className={styles.title}>{title}</h3>\n          <div className={styles.description}>\n            <span>\n              #<Message text={type} />\n            </span>\n            <span>{focusPerformersText}</span>\n          </div>\n        </div>\n      </div>\n    );\n  }\n);\n","import * as React from \"react\";\n\ninterface ArrowLeftIconProps {\n  className?: string;\n}\n\nexport const ArrowLeftIcon = ({ className }: ArrowLeftIconProps) => (\n  <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" className={className}>\n    <path fill=\"none\" d=\"M0 0h24v24H0V0z\" />\n    <path d=\"M15.41 16.59L10.83 12l4.58-4.59L14 6l-6 6 6 6 1.41-1.41z\" />\n  </svg>\n);\n","import * as React from \"react\";\n\ninterface ArrowRightIconProps {\n  className?: string;\n}\n\nexport const ArrowRightIcon = ({ className }: ArrowRightIconProps) => (\n  <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" className={className}>\n    <path fill=\"none\" d=\"M0 0h24v24H0V0z\" />\n    <path d=\"M8.59 16.59L13.17 12 8.59 7.41 10 6l6 6-6 6-1.41-1.41z\" />\n  </svg>\n);\n","import * as React from \"react\";\nimport { motion } from \"framer-motion\";\nimport styles from \"./artworks.module.scss\";\nimport { ArrowLeftIcon } from \"components/atoms/icons/ArrowLeftIcon\";\nimport { ArrowRightIcon } from \"components/atoms/icons/ArrowRightIcon\";\nimport { classNames } from \"utils/strings\";\n\ninterface ArtworksProps {\n  artworks: {\n    large: string;\n    medium: string;\n  }[];\n  title: string;\n  className?: string;\n}\n\nexport const Artworks = ({ artworks, title, className }: ArtworksProps) => {\n  const [artworkIndex, setArtworkIndex] = React.useState(0);\n\n  const handleClickNextArtwork = React.useCallback(() => {\n    if (artworkIndex < artworks.length - 1) {\n      setArtworkIndex(artworkIndex + 1);\n    }\n  }, [artworks, artworkIndex]);\n\n  const handleClickPreviousArtwork = React.useCallback(() => {\n    if (artworkIndex > 0) {\n      setArtworkIndex(artworkIndex - 1);\n    }\n  }, [artworkIndex]);\n\n  const handleClickImage = React.useCallback(() => {\n    if (artworkIndex < artworks.length - 1) {\n      setArtworkIndex(artworkIndex + 1);\n    } else {\n      setArtworkIndex(0);\n    }\n  }, [artworks, artworkIndex]);\n\n  return (\n    <div className={classNames(styles.container, className)}>\n      <div className={styles.artwork}>\n        <motion.button\n          whileHover={{ scale: 2, x: -8 }}\n          onClick={handleClickPreviousArtwork}\n          aria-label=\"Previous Artwork\"\n        >\n          <ArrowLeftIcon className={styles.arrow} />\n        </motion.button>\n        <motion.div whileHover={{ scale: 1.07 }} className={styles.images}>\n          {artworks.map((artwork, index) => (\n            <motion.div\n              key={index}\n              animate={\n                artworkIndex === index\n                  ? { opacity: 1, scale: 1 }\n                  : { opacity: 0, scale: 0.5 }\n              }\n              onClick={handleClickImage}\n            >\n              <img\n                src={artwork.medium}\n                srcSet={`${artwork.large} 1.5x`}\n                alt={title}\n                className={styles.image}\n              />\n            </motion.div>\n          ))}\n        </motion.div>\n        <motion.button\n          whileHover={{ scale: 2, x: 8 }}\n          onClick={handleClickNextArtwork}\n          aria-label=\"Next Artwork\"\n        >\n          <ArrowRightIcon className={styles.arrow} />\n        </motion.button>\n      </div>\n      <div className={styles.indicator}>\n        {artworks.map((_, index) => (\n          <button\n            key={index}\n            onClick={() => setArtworkIndex(index)}\n            aria-label=\"Next Artwork\"\n          >\n            <div\n              style={{\n                backgroundColor: index === artworkIndex ? \"#757575\" : \"#ffffff\",\n              }}\n              className={styles.dot}\n            />\n          </button>\n        ))}\n      </div>\n    </div>\n  );\n};\n","import * as React from \"react\";\nimport { FormattedDate } from \"react-intl\";\nimport { motion } from \"framer-motion\";\nimport styles from \"./cd.module.scss\";\nimport { toCdNumber } from \"utils/strings\";\nimport { Track } from \"components/atoms/Track\";\nimport { CdType, FocusPerformersType, SongType } from \"types/responseTypes\";\nimport { Artworks } from \"components/molecules/Artworks\";\nimport { Links } from \"utils/constants\";\nimport { useScrollRestoration } from \"utils/hooks\";\nimport { Layout } from \"components/atoms/Layout\";\nimport { LocalizedLink } from \"components/atoms/locales/LocalizedLink\";\nimport { ArrowBackIcon } from \"components/atoms/icons/ArrowBackIcon\";\nimport { Message } from \"components/atoms/Message\";\n\nconst containerVariants = {\n  visible: {\n    opacity: 1,\n    x: 0,\n    transition: {\n      when: \"beforeChildren\",\n    },\n  },\n  hidden: {\n    opacity: 0,\n    x: -20,\n  },\n};\n\nconst headingVariants = {\n  visible: {\n    opacity: 1,\n    x: 0,\n  },\n  hidden: {\n    opacity: 0,\n    x: -20,\n  },\n};\n\nconst contentContainerVariants = {\n  visible: {\n    opacity: 1,\n    y: 0,\n    transition: {\n      when: \"beforeChildren\",\n      staggerChildren: 0.2,\n    },\n  },\n  hidden: {\n    opacity: 0,\n    y: 20,\n  },\n};\n\nconst contentVariants = {\n  visible: {\n    opacity: 1,\n    y: 0,\n  },\n  hidden: {\n    opacity: 0,\n    y: -20,\n  },\n};\n\ninterface CdProps {\n  type: CdType;\n  title: string;\n  number: string;\n  artworks: {\n    large: string;\n    medium: string;\n  }[];\n  songs: {\n    key: string;\n    title: string;\n    type: SongType;\n    focusPerformers: {\n      name: string[];\n      type: FocusPerformersType;\n    };\n  }[];\n  release: string;\n}\n\nexport const Cd = ({\n  type,\n  title,\n  number,\n  artworks,\n  songs,\n  release,\n}: CdProps) => {\n  useScrollRestoration();\n\n  return (\n    <div className={styles.background}>\n      <Layout className={styles.page}>\n        <motion.div whileHover={{ x: -7, scale: 1.5 }} className={styles.link}>\n          <LocalizedLink\n            to={type === CdType.Singles ? Links.Singles : Links.Albums}\n            label=\"Back\"\n          >\n            <ArrowBackIcon className={styles.back} />\n          </LocalizedLink>\n        </motion.div>\n        <motion.div variants={containerVariants} className={styles.container}>\n          <motion.div variants={headingVariants} className={styles.heading}>\n            <h4 className={styles.number}>\n              {toCdNumber(number)} {type.slice(0, -1)}\n            </h4>\n            <h1 className={styles.title}>{title}</h1>\n          </motion.div>\n          <motion.div\n            variants={contentContainerVariants}\n            className={styles.flexBox}\n          >\n            <motion.div variants={contentVariants} className={styles.artworks}>\n              <Artworks artworks={artworks} title={title} />\n            </motion.div>\n            <motion.div variants={contentVariants} className={styles.content}>\n              <section className={styles.section}>\n                <h2 className={styles.subheading}>\n                  <Message text=\"track\" />\n                </h2>\n                <ul className={styles.trackList}>\n                  {songs.map((song, index) => (\n                    <li key={song.key} className={styles.track}>\n                      <Track\n                        songKey={song.key}\n                        number={index + 1}\n                        title={song.title}\n                        type={song.type}\n                        focusPerformers={song.focusPerformers}\n                      />\n                    </li>\n                  ))}\n                </ul>\n              </section>\n              <section className={styles.section}>\n                <h2 className={styles.subheading}>\n                  <Message text=\"release\" />\n                </h2>\n                <p className={styles.release}>\n                  <FormattedDate\n                    value={release}\n                    year=\"numeric\"\n                    month=\"short\"\n                    day=\"numeric\"\n                  />\n                </p>\n              </section>\n            </motion.div>\n          </motion.div>\n        </motion.div>\n      </Layout>\n    </div>\n  );\n};\n"],"sourceRoot":""}