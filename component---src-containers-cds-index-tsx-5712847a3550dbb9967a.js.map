{"version":3,"sources":["webpack:///./src/components/atoms/Artwork/index.tsx","webpack:///./src/components/templates/Cds/index.tsx","webpack:///./src/containers/Cds/index.tsx"],"names":["backgroundFade","isHovered","opacity","isNotHovered","titleFade","Artwork","images","title","className","React","setHover","div","onHoverStart","onHoverEnd","whileHover","scale","classNames","styles","container","wrapper","LazyImage","src","small","srcSet","medium","large","alt","image","initial","animate","variants","background","listVariants","visible","transition","when","staggerChildren","duration","hidden","itemVariants","y","Cds","cds","page","key","exit","grid","map","node","number","artwork","LocalizedLink","to","artworks","query","CdsContainer","data","allSinglesJson","allAlbumsJson","currentTab","pageContext","CdType","Singles","edges","undefined"],"mappings":"0LAMMA,EAAiB,CACrBC,UAAW,CACTC,QAAS,IAEXC,aAAc,CACZD,QAAS,IAIPE,EAAY,CAChBH,UAAW,CACTC,QAAS,GAEXC,aAAc,CACZD,QAAS,IAcAG,EAAU,SAAC,GAA+C,IAA7CC,EAA6C,EAA7CA,OAAQC,EAAqC,EAArCA,MAAOC,EAA8B,EAA9BA,UAA8B,EACvCC,YAAe,GAAtCR,EAD8D,KACnDS,EADmD,KAGrE,OACE,gBAAC,IAAOC,IAAR,CACEC,aAAc,kBAAMF,GAAS,IAC7BG,WAAY,kBAAMH,GAAS,IAC3BI,WAAY,CAAEC,MAAO,KACrBP,UAAWQ,YAAWC,IAAOC,UAAWV,IAExC,uBAAKA,UAAWS,IAAOE,SACrB,gBAACC,EAAA,EAAD,CACEC,IAAKf,EAAOgB,MACZC,OAAWjB,EAAOkB,OAAZ,QAA0BlB,EAAOmB,MAAjC,MACNC,IAAKnB,EACLC,UAAWS,IAAOU,QAEpB,gBAAC,IAAOhB,IAAR,CACEiB,SAAS,EACTC,QAAS5B,EAAY,YAAc,eACnC6B,SAAU9B,EACVQ,UAAWS,IAAOc,aAEpB,gBAAC,IAAOpB,IAAR,CACEiB,SAAS,EACTC,QAAS5B,EAAY,YAAc,eACnC6B,SAAU1B,EACVI,UAAWS,IAAOV,OAElB,0BAAKA,OCxDTyB,EAAe,CACnBC,QAAS,CACP/B,QAAS,EACTgC,WAAY,CACVC,KAAM,iBACNC,gBAAiB,IACjBC,SAAU,KAGdC,OAAQ,CACNpC,QAAS,EACTgC,WAAY,CACVG,SAAU,MAKVE,EAAe,CACnBN,QAAS,CAAE/B,QAAS,EAAGsC,EAAG,GAC1BF,OAAQ,CAAEpC,QAAS,EAAGsC,EAAG,KAkBdC,EAAM,SAAC,GAA4B,IAA1BC,EAA0B,EAA1BA,IAAKC,EAAqB,EAArBA,KACzB,OACE,gBAAC,IAAD,KACE,gBAAC,IAAOhC,IAAR,CACEiC,IAAKD,EACLE,KAAK,SACLf,SAAUE,EACVxB,UAAWS,IAAO6B,MAEjBJ,EAAIK,IAAI,gBAAGC,EAAH,EAAGA,KAAH,OACP,gBAAC,IAAOrC,IAAR,CACEmB,SAAUS,EACVK,IAAKD,EAAOK,EAAKC,OACjBzC,UAAWS,IAAOiC,SAElB,gBAACC,EAAA,EAAD,CAAeC,GAAE,IAAMT,EAAN,IAAcK,EAAKC,QAClC,gBAAC,EAAD,CAAS3C,OAAQ0C,EAAKK,SAAS,GAAI9C,MAAOyC,EAAKzC,e,QC5D7D,oCAKO,IAAM+C,EAAQ,aAmFNC,UAjBM,SAAC,GAGP,QAFbC,KAAQC,EAEK,EAFLA,eAAgBC,EAEX,EAFWA,cACTC,EACF,EADbC,YAAeD,WAETjB,EAAMjC,UACV,kBACEkD,IAAeE,IAAOC,QAClBL,EAAeM,MACfL,EAAcK,OACpB,CAACJ,EAAYF,EAAgBC,IAG/B,YAA0BM,IAAnBP,QAAkDO,IAAlBN,EACrC,gBAAC,EAAD,CAAKf,KAAMgB,EAAYjB,IAAKA,IAC1B","file":"component---src-containers-cds-index-tsx-5712847a3550dbb9967a.js","sourcesContent":["import * as React from \"react\";\nimport { motion } from \"framer-motion\";\nimport styles from \"./artwork.module.scss\";\nimport { classNames } from \"utils/strings\";\nimport { LazyImage } from \"components/atoms/LazyImage\";\n\nconst backgroundFade = {\n  isHovered: {\n    opacity: 0.7,\n  },\n  isNotHovered: {\n    opacity: 0,\n  },\n};\n\nconst titleFade = {\n  isHovered: {\n    opacity: 1,\n  },\n  isNotHovered: {\n    opacity: 0,\n  },\n};\n\ninterface ArtworkProps {\n  images: {\n    large: string;\n    medium: string;\n    small: string;\n  };\n  title: string;\n  className?: string;\n}\n\nexport const Artwork = ({ images, title, className }: ArtworkProps) => {\n  const [isHovered, setHover] = React.useState(false);\n\n  return (\n    <motion.div\n      onHoverStart={() => setHover(true)}\n      onHoverEnd={() => setHover(false)}\n      whileHover={{ scale: 1.1 }}\n      className={classNames(styles.container, className)}\n    >\n      <div className={styles.wrapper}>\n        <LazyImage\n          src={images.small}\n          srcSet={`${images.medium} 2x, ${images.large} 3x`}\n          alt={title}\n          className={styles.image}\n        />\n        <motion.div\n          initial={false}\n          animate={isHovered ? \"isHovered\" : \"isNotHovered\"}\n          variants={backgroundFade}\n          className={styles.background}\n        />\n        <motion.div\n          initial={false}\n          animate={isHovered ? \"isHovered\" : \"isNotHovered\"}\n          variants={titleFade}\n          className={styles.title}\n        >\n          <h3>{title}</h3>\n        </motion.div>\n      </div>\n    </motion.div>\n  );\n};\n","import * as React from \"react\";\nimport { AnimatePresence, motion } from \"framer-motion\";\nimport styles from \"./cds.module.scss\";\nimport { LocalizedLink } from \"components/atoms/locales/LocalizedLink\";\nimport { Artwork } from \"components/atoms/Artwork\";\nimport { CdType } from \"types/responseTypes\";\n\nconst listVariants = {\n  visible: {\n    opacity: 1,\n    transition: {\n      when: \"beforeChildren\",\n      staggerChildren: 0.05,\n      duration: 0.1,\n    },\n  },\n  hidden: {\n    opacity: 0,\n    transition: {\n      duration: 0.1,\n    },\n  },\n};\n\nconst itemVariants = {\n  visible: { opacity: 1, y: 0 },\n  hidden: { opacity: 0, y: 20 },\n};\n\ninterface CdsProps {\n  page: CdType;\n  cds: {\n    node: {\n      title: string;\n      number: string;\n      artworks: {\n        large: string;\n        medium: string;\n        small: string;\n      }[];\n    };\n  }[];\n}\n\nexport const Cds = ({ cds, page }: CdsProps) => {\n  return (\n    <AnimatePresence>\n      <motion.div\n        key={page}\n        exit=\"hidden\"\n        variants={listVariants}\n        className={styles.grid}\n      >\n        {cds.map(({ node }) => (\n          <motion.div\n            variants={itemVariants}\n            key={page + node.number}\n            className={styles.artwork}\n          >\n            <LocalizedLink to={`/${page}/${node.number}`}>\n              <Artwork images={node.artworks[0]} title={node.title} />\n            </LocalizedLink>\n          </motion.div>\n        ))}\n      </motion.div>\n    </AnimatePresence>\n  );\n};\n","import * as React from \"react\";\nimport { graphql } from \"gatsby\";\nimport { Cds } from \"components/templates/Cds\";\nimport { CdType } from \"types/responseTypes\";\n\nexport const query = graphql`\n  query CdsQuery {\n    allAlbumsJson {\n      edges {\n        node {\n          title\n          number\n          artworks {\n            large\n            medium\n            small\n          }\n        }\n      }\n    }\n    allSinglesJson {\n      edges {\n        node {\n          title\n          number\n          artworks {\n            large\n            medium\n            small\n          }\n        }\n      }\n    }\n  }\n`;\n\ninterface CdsData {\n  data: {\n    allSinglesJson: {\n      edges: {\n        node: {\n          title: string;\n          number: string;\n          artworks: {\n            large: string;\n            medium: string;\n            small: string;\n          }[];\n        };\n      }[];\n    };\n    allAlbumsJson: {\n      edges: {\n        node: {\n          title: string;\n          number: string;\n          artworks: {\n            large: string;\n            medium: string;\n            small: string;\n          }[];\n        };\n      }[];\n    };\n  };\n  pageContext: {\n    currentTab: CdType;\n    locale: string;\n  };\n}\n\nconst CdsContainer = ({\n  data: { allSinglesJson, allAlbumsJson },\n  pageContext: { currentTab },\n}: CdsData) => {\n  const cds = React.useMemo(\n    () =>\n      currentTab === CdType.Singles\n        ? allSinglesJson.edges\n        : allAlbumsJson.edges,\n    [currentTab, allSinglesJson, allAlbumsJson]\n  );\n\n  return allSinglesJson !== undefined && allAlbumsJson !== undefined ? (\n    <Cds page={currentTab} cds={cds} />\n  ) : null;\n};\n\nexport default CdsContainer;\n"],"sourceRoot":""}