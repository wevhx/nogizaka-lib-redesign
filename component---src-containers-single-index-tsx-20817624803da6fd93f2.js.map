{"version":3,"sources":["webpack:///./src/containers/Single/index.tsx","webpack:///./src/components/atoms/icons/ArrowBackIcon.tsx","webpack:///./src/components/atoms/Track/index.tsx","webpack:///./src/components/atoms/icons/ArrowLeftIcon.tsx","webpack:///./src/components/atoms/icons/ArrowRightIcon.tsx","webpack:///./src/components/molecules/Artworks/index.tsx","webpack:///./src/components/templates/Cd/index.tsx"],"names":["query","SingleContainer","singlesJson","data","type","CdType","Singles","title","number","artworks","songs","release","ArrowBackIcon","className","width","height","viewBox","fill","d","containerVariants","hover","backgroundColor","transition","duration","textVariants","color","Track","injectIntl","locale","intl","focusPerformers","songKey","focusPerformersText","React","comma","Language","Zh","Ja","name","length","FocusPerformersType","Center","reduce","acc","curr","div","whileHover","variants","classNames","styles","container","LocalizedLink","to","span","content","h3","description","id","ArrowLeftIcon","ArrowRightIcon","Artworks","artworkIndex","setArtworkIndex","handleClickNextArtwork","handleClickPreviousArtwork","handleClickImage","artwork","button","scale","x","onClick","aria-label","arrow","images","map","index","img","key","animate","opacity","src","medium","srcSet","large","alt","image","indicator","_","style","dot","visible","when","hidden","headingVariants","contentContainerVariants","y","staggerChildren","contentVariants","Cd","useScrollRestoration","background","Layout","link","Links","Albums","label","back","heading","toCdNumber","slice","flexBox","section","subheading","trackList","song","track","value","year","month","day"],"mappings":"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","file":"component---src-containers-single-index-tsx-20817624803da6fd93f2.js","sourcesContent":["import * as React from \"react\";\nimport { graphql } from \"gatsby\";\nimport { SongType, FocusPerformersType, CdType } from \"types/responseTypes\";\nimport { Cd } from \"components/templates/Cd\";\n\nexport const query = graphql`\n  query($number: String!) {\n    singlesJson(number: { eq: $number }) {\n      title\n      number\n      artworks {\n        large\n        medium\n      }\n      songs {\n        key\n        title\n        type\n        focusPerformers {\n          name\n          type\n        }\n      }\n      release\n    }\n  }\n`;\n\ninterface SingleData {\n  data: {\n    singlesJson: {\n      title: string;\n      number: string;\n      artworks: {\n        large: string;\n        medium: string;\n      }[];\n      songs: {\n        key: string;\n        title: string;\n        type: SongType;\n        focusPerformers: {\n          name: string[];\n          type: FocusPerformersType;\n        };\n      }[];\n      release: string;\n    };\n  };\n  pageContext: {\n    cdType: CdType;\n    number: string;\n    locale: string;\n  };\n}\n\nconst SingleContainer = ({ data: { singlesJson } }: SingleData) => {\n  return singlesJson ? (\n    <Cd\n      type={CdType.Singles}\n      title={singlesJson.title}\n      number={singlesJson.number}\n      artworks={singlesJson.artworks}\n      songs={singlesJson.songs}\n      release={singlesJson.release}\n    />\n  ) : null;\n};\n\nexport default SingleContainer;\n","import * as React from \"react\";\n\ninterface ArrowBackIconProps {\n  className?: string;\n}\n\nexport const ArrowBackIcon = ({ className }: ArrowBackIconProps) => (\n  <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" className={className}>\n    <path fill=\"none\" d=\"M0 0h24v24H0V0z\" />\n    <path d=\"M20 11H7.83l5.59-5.59L12 4l-8 8 8 8 1.41-1.41L7.83 13H20v-2z\" />\n  </svg>\n);\n","import * as React from \"react\";\nimport styles from \"./track.module.scss\";\nimport { FocusPerformersType, SongType } from \"types/responseTypes\";\nimport { FormattedMessage, injectIntl } from \"react-intl\";\nimport { Language } from \"utils/constants\";\nimport { motion } from \"framer-motion\";\nimport { LocalizedLink } from \"components/atoms/locales/LocalizedLink\";\nimport { classNames } from \"utils/strings\";\n\nconst containerVariants = {\n  hover: { backgroundColor: \"#595959\", transition: { duration: 0.3 } },\n};\n\nconst textVariants = {\n  hover: { color: \"#ffffff\", transition: { duration: 0.2 } },\n};\n\ninterface TrackProps {\n  number: number;\n  songKey: string;\n  title: string;\n  type: SongType;\n  focusPerformers: {\n    name: string[];\n    type: FocusPerformersType;\n  };\n  intl: any;\n  className?: string;\n}\n\nexport const Track = injectIntl(\n  ({\n    intl: { locale },\n    focusPerformers,\n    songKey,\n    number,\n    title,\n    type,\n    className,\n  }: TrackProps) => {\n    const focusPerformersText = React.useMemo(() => {\n      let comma: string;\n      switch (locale) {\n        case Language.Zh:\n          comma = \"、\";\n          break;\n        case Language.Ja:\n          comma = \"・\";\n          break;\n        default:\n          comma = \", \";\n          break;\n      }\n\n      if (focusPerformers.name.length > 0) {\n        if (focusPerformers.type === FocusPerformersType.Center) {\n          return (\n            \"C: \" +\n            focusPerformers.name.reduce((acc, curr) => acc + comma + curr)\n          );\n        }\n        return focusPerformers.name.reduce((acc, curr) => acc + comma + curr);\n      }\n      return \"\";\n    }, [focusPerformers, locale]);\n\n    return songKey !== \"OVERTURE\" ? (\n      <motion.div\n        whileHover=\"hover\"\n        variants={containerVariants}\n        className={classNames(styles.container, className)}\n      >\n        <LocalizedLink to={`/songs/${songKey}`}>\n          <motion.span variants={textVariants} className={styles.number}>\n            {number}.\n          </motion.span>\n          <div className={styles.content}>\n            <motion.h3 variants={textVariants} className={styles.title}>\n              {title}\n            </motion.h3>\n            <motion.div variants={textVariants} className={styles.description}>\n              <span>\n                #<FormattedMessage {...({ id: type } as any)} />\n              </span>\n              <span>{focusPerformersText}</span>\n            </motion.div>\n          </div>\n        </LocalizedLink>\n      </motion.div>\n    ) : (\n      <div className={classNames(styles.container, className)}>\n        <span className={styles.number}>{number}.</span>\n        <div className={styles.content}>\n          <h3 className={styles.title}>{title}</h3>\n          <div className={styles.description}>\n            <span>\n              #<FormattedMessage {...({ id: type } as any)} />\n            </span>\n            <span>{focusPerformersText}</span>\n          </div>\n        </div>\n      </div>\n    );\n  }\n);\n","import * as React from \"react\";\n\ninterface ArrowLeftIconProps {\n  className?: string;\n}\n\nexport const ArrowLeftIcon = ({ className }: ArrowLeftIconProps) => (\n  <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" className={className}>\n    <path fill=\"none\" d=\"M0 0h24v24H0V0z\" />\n    <path d=\"M15.41 16.59L10.83 12l4.58-4.59L14 6l-6 6 6 6 1.41-1.41z\" />\n  </svg>\n);\n","import * as React from \"react\";\n\ninterface ArrowRightIconProps {\n  className?: string;\n}\n\nexport const ArrowRightIcon = ({ className }: ArrowRightIconProps) => (\n  <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" className={className}>\n    <path fill=\"none\" d=\"M0 0h24v24H0V0z\" />\n    <path d=\"M8.59 16.59L13.17 12 8.59 7.41 10 6l6 6-6 6-1.41-1.41z\" />\n  </svg>\n);\n","import * as React from \"react\";\nimport styles from \"./artworks.module.scss\";\nimport { ArrowLeftIcon } from \"components/atoms/icons/ArrowLeftIcon\";\nimport { ArrowRightIcon } from \"components/atoms/icons/ArrowRightIcon\";\nimport { motion } from \"framer-motion\";\nimport { classNames } from \"utils/strings\";\n\ninterface ArtworksProps {\n  artworks: {\n    large: string;\n    medium: string;\n  }[];\n  title: string;\n  className?: string;\n}\n\nexport const Artworks = ({ artworks, title, className }: ArtworksProps) => {\n  const [artworkIndex, setArtworkIndex] = React.useState(0);\n\n  const handleClickNextArtwork = React.useCallback(() => {\n    if (artworkIndex < artworks.length - 1) {\n      setArtworkIndex(artworkIndex + 1);\n    }\n  }, [artworks, artworkIndex]);\n\n  const handleClickPreviousArtwork = React.useCallback(() => {\n    if (artworkIndex > 0) {\n      setArtworkIndex(artworkIndex - 1);\n    }\n  }, [artworkIndex]);\n\n  const handleClickImage = React.useCallback(() => {\n    if (artworkIndex < artworks.length - 1) {\n      setArtworkIndex(artworkIndex + 1);\n    } else {\n      setArtworkIndex(0);\n    }\n  }, [artworks, artworkIndex]);\n\n  return (\n    <div className={classNames(styles.container, className)}>\n      <div className={styles.artwork}>\n        <motion.button\n          whileHover={{ scale: 2, x: -8 }}\n          onClick={handleClickPreviousArtwork}\n          aria-label=\"Previous Artwork\"\n        >\n          <ArrowLeftIcon className={styles.arrow} />\n        </motion.button>\n        <motion.div whileHover={{ scale: 1.07 }} className={styles.images}>\n          {artworks.map((artwork, index) => (\n            <motion.img\n              key={index}\n              animate={\n                artworkIndex === index\n                  ? { opacity: 1, scale: 1 }\n                  : { opacity: 0, scale: 0.5 }\n              }\n              src={artwork.medium}\n              srcSet={`${artwork.large} 1.5x`}\n              alt={title}\n              onClick={handleClickImage}\n              className={styles.image}\n            />\n          ))}\n        </motion.div>\n        <motion.button\n          whileHover={{ scale: 2, x: 8 }}\n          onClick={handleClickNextArtwork}\n          aria-label=\"Next Artwork\"\n        >\n          <ArrowRightIcon className={styles.arrow} />\n        </motion.button>\n      </div>\n      <div className={styles.indicator}>\n        {artworks.map((_, index) => (\n          <button\n            key={index}\n            onClick={() => setArtworkIndex(index)}\n            aria-label=\"Next Artwork\"\n          >\n            <div\n              style={{\n                backgroundColor: index === artworkIndex ? \"#757575\" : \"#ffffff\",\n              }}\n              className={styles.dot}\n            />\n          </button>\n        ))}\n      </div>\n    </div>\n  );\n};\n","import * as React from \"react\";\nimport { toCdNumber } from \"utils/strings\";\nimport styles from \"./cd.module.scss\";\nimport { Track } from \"components/atoms/Track\";\nimport { FocusPerformersType, SongType, CdType } from \"types/responseTypes\";\nimport { Artworks } from \"components/molecules/Artworks\";\nimport { FormattedMessage, FormattedDate } from \"react-intl\";\nimport { motion } from \"framer-motion\";\nimport { Links } from \"utils/constants\";\nimport { useScrollRestoration } from \"utils/hooks\";\nimport { Layout } from \"components/atoms/Layout\";\nimport { LocalizedLink } from \"components/atoms/locales/LocalizedLink\";\nimport { ArrowBackIcon } from \"components/atoms/icons/ArrowBackIcon\";\n\nconst containerVariants = {\n  visible: {\n    opacity: 1,\n    x: 0,\n    transition: {\n      when: \"beforeChildren\",\n    },\n  },\n  hidden: {\n    opacity: 0,\n    x: -20,\n  },\n};\n\nconst headingVariants = {\n  visible: {\n    opacity: 1,\n    x: 0,\n  },\n  hidden: {\n    opacity: 0,\n    x: -20,\n  },\n};\n\nconst contentContainerVariants = {\n  visible: {\n    opacity: 1,\n    y: 0,\n    transition: {\n      when: \"beforeChildren\",\n      staggerChildren: 0.2,\n    },\n  },\n  hidden: {\n    opacity: 0,\n    y: 20,\n  },\n};\n\nconst contentVariants = {\n  visible: {\n    opacity: 1,\n    y: 0,\n  },\n  hidden: {\n    opacity: 0,\n    y: -20,\n  },\n};\n\ninterface CdProps {\n  type: CdType;\n  title: string;\n  number: string;\n  artworks: {\n    large: string;\n    medium: string;\n  }[];\n  songs: {\n    key: string;\n    title: string;\n    type: SongType;\n    focusPerformers: {\n      name: string[];\n      type: FocusPerformersType;\n    };\n  }[];\n  release: string;\n}\n\nexport const Cd = ({\n  type,\n  title,\n  number,\n  artworks,\n  songs,\n  release,\n}: CdProps) => {\n  useScrollRestoration();\n\n  return (\n    <div className={styles.background}>\n      <Layout>\n        <motion.div whileHover={{ x: -7, scale: 1.5 }} className={styles.link}>\n          <LocalizedLink\n            to={type === CdType.Singles ? Links.Singles : Links.Albums}\n            label=\"Back\"\n          >\n            <ArrowBackIcon className={styles.back} />\n          </LocalizedLink>\n        </motion.div>\n        <motion.div variants={containerVariants} className={styles.container}>\n          <motion.div variants={headingVariants} className={styles.heading}>\n            <h4 className={styles.number}>\n              {toCdNumber(number)} {type.slice(0, -1)}\n            </h4>\n            <h1 className={styles.title}>{title}</h1>\n          </motion.div>\n          <motion.div\n            variants={contentContainerVariants}\n            className={styles.flexBox}\n          >\n            <motion.div variants={contentVariants} className={styles.artworks}>\n              <Artworks artworks={artworks} title={title} />\n            </motion.div>\n            <motion.div variants={contentVariants} className={styles.content}>\n              <section className={styles.section}>\n                <h2 className={styles.subheading}>\n                  <FormattedMessage {...({ id: \"track\" } as any)} />\n                </h2>\n                <ul className={styles.trackList}>\n                  {songs.map((song, index) => (\n                    <li key={song.key} className={styles.track}>\n                      <Track\n                        songKey={song.key}\n                        number={index + 1}\n                        title={song.title}\n                        type={song.type}\n                        focusPerformers={song.focusPerformers}\n                      />\n                    </li>\n                  ))}\n                </ul>\n              </section>\n              <section className={styles.section}>\n                <h2 className={styles.subheading}>\n                  <FormattedMessage {...({ id: \"release\" } as any)} />\n                </h2>\n                <p className={styles.release}>\n                  <FormattedDate\n                    value={release}\n                    year=\"numeric\"\n                    month=\"short\"\n                    day=\"numeric\"\n                  />\n                </p>\n              </section>\n            </motion.div>\n          </motion.div>\n        </motion.div>\n      </Layout>\n    </div>\n  );\n};\n"],"sourceRoot":""}